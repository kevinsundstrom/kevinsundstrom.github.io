name: Publish or Edit Article from Issue

on:
  issues:
    types: [opened, edited]

jobs:
  publish-article:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'article') || contains(github.event.issue.labels.*.name, 'article-edit')
    permissions:
      contents: write
      issues: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install
        
    - name: Parse issue and generate article data
      id: parse-issue
      run: |
        # Check if this is an edit request - use multiple methods to be robust
        LABELS="${{ github.event.issue.labels.*.name }}"
        TITLE="${{ github.event.issue.title }}"
        BODY="${{ github.event.issue.body }}"
        
        echo "Labels: $LABELS"
        echo "Title: $TITLE"
        echo "Checking for edit indicators..."
        
        # Method 1: Check labels for article-edit
        EDIT_BY_LABEL=false
        if echo "$LABELS" | grep -q "article-edit"; then
          echo "✓ Found article-edit label"
          EDIT_BY_LABEL=true
        fi
        
        # Method 2: Check title for [Edit] prefix
        EDIT_BY_TITLE=false
        if echo "$TITLE" | grep -iq "^\[edit\]"; then
          echo "✓ Found [Edit] in title"
          EDIT_BY_TITLE=true
        fi
        
        # Method 3: Check body for Article URL field (unique to edit template)
        EDIT_BY_BODY=false
        if echo "$BODY" | grep -q "### Article URL"; then
          echo "✓ Found Article URL field in body"
          EDIT_BY_BODY=true
        fi
        
        # Determine if this is an edit (any method indicates edit)
        if [ "$EDIT_BY_LABEL" = true ] || [ "$EDIT_BY_TITLE" = true ] || [ "$EDIT_BY_BODY" = true ]; then
          echo "==> Processing as ARTICLE EDIT"
          echo "is_edit=true" >> $GITHUB_OUTPUT
          node .github/scripts/parse-edit-issue.js
        else
          echo "==> Processing as NEW ARTICLE"
          echo "is_edit=false" >> $GITHUB_OUTPUT
          node .github/scripts/parse-issue.js
        fi
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        
    - name: Generate or update article files
      run: |
        # Use the is_edit output from the previous step for consistency
        if [ "${{ steps.parse-issue.outputs.is_edit }}" = "true" ]; then
          echo "Updating existing article"
          node .github/scripts/update-article.js
        else
          echo "Generating new article"
          node .github/scripts/generate-article.js
        fi
      env:
        ARTICLE_DATA: ${{ steps.parse-issue.outputs.article-data }}
        
    - name: Update article indexes
      run: |
        # Always update indexes after article changes (both new and edited)
        node .github/scripts/update-indexes.js
      env:
        ARTICLE_DATA: ${{ steps.parse-issue.outputs.article-data }}
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          # Use the is_edit output for consistent commit messages
          if [ "${{ steps.parse-issue.outputs.is_edit }}" = "true" ]; then
            git commit -m "Update article from issue #${{ github.event.issue.number }}"
          else
            git commit -m "Publish article from issue #${{ github.event.issue.number }}"
          fi
          git push
        fi
        
    - name: Comment on issue
      uses: actions/github-script@v7
      with:
        script: |
          const articleData = JSON.parse(process.env.ARTICLE_DATA);
          const isEdit = "${{ steps.parse-issue.outputs.is_edit }}" === "true";
          
          const comment = isEdit ? 
            `✅ Article updated successfully!
            
            **Article URL:** https://kevinsundstrom.com${articleData.url}
            **Category:** ${articleData.category || 'General'}
            ${articleData.editNotes ? `**Edit Notes:** ${articleData.editNotes}` : ''}
            
            The article has been automatically updated and republished to the website.` :
            `✅ Article published successfully!
            
            **Article URL:** https://kevinsundstrom.com${articleData.url}
            **Category:** ${articleData.category}
            
            The article has been automatically generated and published to the website.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
      env:
        ARTICLE_DATA: ${{ steps.parse-issue.outputs.article-data }}